// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	gojenkins "github.com/bndr/gojenkins"

	mock "github.com/stretchr/testify/mock"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// BuildJob provides a mock function with given fields: ctx, name, params
func (_m *Client) BuildJob(ctx context.Context, name string, params map[string]string) (int64, error) {
	ret := _m.Called(ctx, name, params)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]string) int64); ok {
		r0 = rf(ctx, name, params)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, map[string]string) error); ok {
		r1 = rf(ctx, name, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllNodes provides a mock function with given fields: ctx
func (_m *Client) GetAllNodes(ctx context.Context) ([]*gojenkins.Node, error) {
	ret := _m.Called(ctx)

	var r0 []*gojenkins.Node
	if rf, ok := ret.Get(0).(func(context.Context) []*gojenkins.Node); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gojenkins.Node)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetJob provides a mock function with given fields: ctx, id, parentIDs
func (_m *Client) GetJob(ctx context.Context, id string, parentIDs ...string) (*gojenkins.Job, error) {
	_va := make([]interface{}, len(parentIDs))
	for _i := range parentIDs {
		_va[_i] = parentIDs[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gojenkins.Job
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) *gojenkins.Job); ok {
		r0 = rf(ctx, id, parentIDs...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gojenkins.Job)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, ...string) error); ok {
		r1 = rf(ctx, id, parentIDs...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
