// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	slack "github.com/slack-go/slack"
	mock "github.com/stretchr/testify/mock"
)

// SlackClient is an autogenerated mock type for the SlackClient type
type SlackClient struct {
	mock.Mock
}

// AddReaction provides a mock function with given fields: name, item
func (_m *SlackClient) AddReaction(name string, item slack.ItemRef) {
	_m.Called(name, item)
}

// GetReactions provides a mock function with given fields: item, params
func (_m *SlackClient) GetReactions(item slack.ItemRef, params slack.GetReactionsParameters) ([]slack.ItemReaction, error) {
	ret := _m.Called(item, params)

	var r0 []slack.ItemReaction
	if rf, ok := ret.Get(0).(func(slack.ItemRef, slack.GetReactionsParameters) []slack.ItemReaction); ok {
		r0 = rf(item, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]slack.ItemReaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(slack.ItemRef, slack.GetReactionsParameters) error); ok {
		r1 = rf(item, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveReaction provides a mock function with given fields: name, item
func (_m *SlackClient) RemoveReaction(name string, item slack.ItemRef) {
	_m.Called(name, item)
}

// Reply provides a mock function with given fields: event, text, options
func (_m *SlackClient) Reply(event slack.MessageEvent, text string, options ...slack.MsgOption) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, event, text)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// ReplyError provides a mock function with given fields: event, err
func (_m *SlackClient) ReplyError(event slack.MessageEvent, err error) {
	_m.Called(event, err)
}

// SendMessage provides a mock function with given fields: event, text, options
func (_m *SlackClient) SendMessage(event slack.MessageEvent, text string, options ...slack.MsgOption) string {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, event, text)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 string
	if rf, ok := ret.Get(0).(func(slack.MessageEvent, string, ...slack.MsgOption) string); ok {
		r0 = rf(event, text, options...)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SendToUser provides a mock function with given fields: user, text
func (_m *SlackClient) SendToUser(user string, text string) {
	_m.Called(user, text)
}
